W 0  # Function printInt
W 0  # Input: printInt_val, the signed 32-bit number to be printed.
W 0  # Side-effects: Prints the specified number string to the output in base 10. AC, E, and printInt_val are undefined on return.
W 0  # Output: None.
W 0  #
W 0  # The implementation is based on this Java code (int means signed 32-bit integer):
W 0  #   printInt(int val) {
W 0  #     if (val >= 0) val = -val;
W 0  #     else print('-');
W 0  #     
W 0  #     int divisor = 1;
W 0  #     while (val / divisor + 9 < 0)
W 0  #     divisor *= 10;
W 0  #   
W 0  #     do {
W 0  #       print((char)('0' - x / div % 10));
W 0  #       div /= 10;
W 0  #     } while (div != 0);
W 0  #   }


printInt_cHyphenMinus: C '-'

printInt_val: W 1
printInt_divisor: W 1
printInt_temp: W 1

printInt: W 1
	LDA printInt_val
	AND signBit
	BZE printInt_positive
	BUN printInt_negative
printInt_negative:
	LDA printInt_cHyphenMinus
	printInt_out0: OUT printInt_out0
	BUN printInt_findDivisor
printInt_positive:
	LDA zero
	SUB printInt_val
	STA printInt_val
	BUN printInt_findDivisor
	
printInt_findDivisor:
	LDA one
	STA printInt_divisor
printInt_divisorLoop:
	LDA printInt_val
	DIV printInt_divisor
	ADD nine
	AND signBit
	BZE printInt_printLoop
	LDA printInt_divisor
	MUL ten
	STA printInt_divisor
	BUN printInt_divisorLoop
	
printInt_printLoop:
	LDA printInt_val
	DIV printInt_divisor
	MOD ten
	STA printInt_temp
	LDA cZero
	SUB printInt_temp
	printInt_out1: OUT printInt_out1
	
	LDA printInt_divisor
	DIV ten
	STA printInt_divisor
	IOR zero
	BZE printInt_ret
	BUN printInt_printLoop
	
printInt_ret:
	LDA cNewLine
	printInt_out2: OUT printInt_out2
	BIN printInt
